; NOTE:
; If "file system upload" command is missing PlatformIO UI in VSCode:
; run `pio run -t uploadfs` in the terminal.
; Typically, this is caused by having an invalid platformio.ini
; (or platform_override.ini), and this will show a more coherent
; error message in the terminal output.

; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
extra_configs = platformio_override.ini ; so users can easily override settings
default_envs = fastled_webserver__d1_mini
;, fib1024__d1_mini, fib512__d1_mini, fib256__d1_mini, fib128__d1_mini, fib64_full__d1_mini, fib64_mini__d1_mini, fib32__d1_mini, esp_thing__d1_mini, kraken64__d1_mini, chamaeleon64__d1_mini, esp_thing__d1_mini, 1628_rings__d1_mini
; default_envs = fastled_webserver
; default_envs = fib1024__d1_mini
; default_envs = fib512__d1_mini
; default_envs = fib256__d1_mini
; default_envs = fib128__d1_mini
; default_envs = fib64_full__d1_mini
; default_envs = fib64_mini__d1_mini
; default_envs = fib64_micro__d1_mini
; default_envs = fib64_nano__d1_mini
; default_envs = fib32__d1_mini
; default_envs = esp_thing__d1_mini
; default_envs = kraken64__d1_mini
; default_envs = chamaeleon64__d1_mini
; default_envs = esp_thing__d1_mini
; default_envs = 1628_rings__d1_mini





src_dir = ./esp8266-fastled-webserver/
data_dir = ./esp8266-fastled-webserver/data
; build_cache_dir = ~/.buildcache

[common]
ldscript_1m128k = eagle.flash.1m128.ld
ldscript_2m512k = eagle.flash.2m512.ld
ldscript_2m1m = eagle.flash.2m1m.ld
ldscript_4m1m = eagle.flash.4m1m.ld
debug_flags = 
	-D DEBUG=1
	-D DEBUG_ESP_PORT=Serial
build_flags = 
	-Wall
	-Wextra
	-fno-exceptions
	-D SECURE_CLIENT=SECURE_CLIENT_BEARSSL
	-D NDEBUG
	-D BUILDING_USING_PLATFORMIO

build_flags_esp8266 = ${common.build_flags}  ${esp8266.build_flags}
build_flags_esp32 = ${common.build_flags}  ${esp32.build_flags}
build_unflags = 

; YES, the mismatch in version numbers is confusing.
; This gives the *LATEST* espressif release for a given arduino core version.
arduino_core_2_6_3   = espressif8266@2.4.0
arduino_core_2_7_0   = espressif8266@2.5.0
arduino_core_2_7_1   = espressif8266@2.5.3
arduino_core_2_7_2   = espressif8266@2.6.0
arduino_core_2_7_3   = espressif8266@2.6.1
arduino_core_2_7_4   = espressif8266@2.6.3
; WARNING -- Moving to v3.0.0 or higher risks MAJOR breaking changes.
;            See https://github.com/esp8266/Arduino/releases/tag/3.0.0
;            In particular, new() no longer will return nullptr ...
;            See https://github.com/esp8266/Arduino/pull/7536#issuecomment-683431735
arduino_core_3_0_0   = espressif8266@3.0.0
arduino_core_3_0_1   = espressif8266@3.1.0
arduino_core_3_0_2   = espressif8266@3.2.0
arduino_core_develop = https://github.com/platformio/platform-espressif8266#develop
arduino_core_git = https://github.com/platformio/platform-espressif8266#feature/stage

; Define the version to use based on the Arduino Core version...
platform_default = ${common.arduino_core_2_7_4}
platform_packages = tasmota/framework-arduinoespressif8266 @ 3.20704.7
	platformio/toolchain-xtensa @ ~2.40802.200502
	platformio/tool-esptool @ ~1.413.0
	platformio/tool-esptoolpy @ ~1.30000.0

[scripts_defaults]
extra_scripts = 
	post:pio-scripts/strip-floats.py

[env]
check_skip_packages = yes           # required for cppcheck to not crash as of 2021-12-14
check_tool = cppcheck
# check_tool = cppcheck, clangtidy  # eventually want to also run clangtidy (which crashes with error 0xC0000005 (STATUS_ACCESS_VIOLATION))
check_flags =
	cppcheck: --enable=all --std=c++11 --inconclusive --addon=cert.py
	clangtidy: --checks=*

framework = arduino
board_build.flash_mode = dout
board_build.filesystem = littlefs
monitor_speed = 115200
upload_speed = 921600
extra_scripts = ${scripts_defaults.extra_scripts}
lib_compat_mode = strict
lib_deps = 
	fastled/FastLED            @  3.4.0
	bblanchon/ArduinoJson      @ ^6.18.5
	lorol/LITTLEFS_esp32       @ ^1.0.6
	; https://github.com/arduino-libraries/NTPClient.git    @  3.2.0
	NTPClient=https://github.com/arduino-libraries/NTPClient/archive/refs/tags/3.2.0.zip
	https://github.com/tzapu/WiFiManager.git              @ ^2.0.4-beta

[esp8266]
build_flags = 
	-D ESP8266
	-D FP_IN_IROM
	-D PIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
	-D PIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
	-D VTABLES_IN_FLASH
	
lib_deps = 
	${env.lib_deps}

[esp32]
build_flags = 
	-g
	-D ARDUINO_ARCH_ESP32
	-D CONFIG_LITTLEFS_FOR_IDF_3_2
lib_deps = 
	${env.lib_deps}

[common__d1_mini]
platform = ${common.platform_default}
platform_packages = ${common.platform_packages}
lib_deps = ${esp8266.lib_deps}
board = d1_mini
board_build.ldscript = ${common.ldscript_4m1m}
build_unflags = ${common.build_unflags}

[common__d1_mini32]
platform = espressif32@2.0
platform_packages = ${common.platform_packages}
lib_deps = ${esp32.lib_deps}
board = wemos_d1_mini32
board_build.ldscript = ${common.ldscript_4m1m}
build_unflags = ${common.build_unflags}


[env:fastled_webserver__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_DEFAULT

[env:fib1024__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_FIBONACCI1024

[env:fib512__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_FIBONACCI512

[env:fib256__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_FIBONACCI256

[env:fib128__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_FIBONACCI128

[env:fib64_full__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_FIBONACCI64_FULL


[env:fib64_mini__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_FIBONACCI64_MINI


; NOT YET SUPPORTED.
; QT Py does not have WiFi.
; QT Py is a ATSAMD21E18 32-bit Cortex M0+
; - 48 MHz 32 bit processor with
;   256KB Flash and 32 KB RAM
; Support *is* possible, but would require
; factoring out all the WiFi functionality (at least).
[env:fib64_micro__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_FIBONACCI64_MICRO

; NOT YET SUPPORTED.
; QT Py does not have WiFi.
; QT Py is a ATSAMD21E18 32-bit Cortex M0+
; - 48 MHz 32 bit processor with
;   256KB Flash and 32 KB RAM
; Support *is* possible, but would require
; factoring out all the WiFi functionality (at least).
[env:fib64_nano__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_FIBONACCI64_NANO

[env:fib32__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_FIBONACCI32

; NOT YET SUPPORTED
; ESP32 is a work-in-progress
[env:fib256__d1_mini32]
extends = common__d1_mini32
build_flags =
	${common.build_flags_esp32}
	-D PRODUCT_FIBONACCI256

[env:kraken64__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_KRAKEN64

[env:chamaeleon64__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_CHAMAELEON64

[env:esp_thing__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_ESP8266_THING

[env:1628_rings__d1_mini]
extends = common__d1_mini
build_flags =
	${common.build_flags_esp8266}
	-D PRODUCT_1628_RINGS
